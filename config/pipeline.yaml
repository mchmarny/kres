# Capture new item on Redis queue event
apiVersion: sources.eventing.knative.dev/v1alpha1
kind: ContainerSource
metadata:
  name: redis-queue-stock-source
  namespace: demo
spec:
  image: gcr.io/s9-demo/kres:latest
  imagePullPolicy: Always
  env:
  - name: RELEASE
    value: "v0.3.3"
  - name: REDIS_HOST
    value: "redis.demo.svc.cluster.local:6379"
  - name: REDIS_QUEUE
    value: "stocks"
  - name: REDIS_PASS
    valueFrom:
      secretKeyRef:
        name: redis-secrets
        key: REDIS_PASS
  sink:
    apiVersion: serving.knative.dev/v1alpha1
    kind: Channel
    name: stocks
    namespace: demo
---
# Filter out non NASDAQ stocks
apiVersion: eventing.knative.dev/v1alpha1
kind: Subscription
metadata:
  name: stock-filter-sub
  namespace: demo
spec:
  channel:
    apiVersion: eventing.knative.dev/v1alpha1
    kind: Channel
    name: stocks
    namespace: demo
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1alpha1
      kind: Service
      name: stock-filter
      namespace: demo
  sink:
    apiVersion: serving.knative.dev/v1alpha1
    kind: Channel
    name: stock-filtered
    namespace: demo
---
# Price NASDAQ stocks
apiVersion: eventing.knative.dev/v1alpha1
kind: Subscription
metadata:
  name: stock-pricer-sub
  namespace: demo
spec:
  channel:
    apiVersion: eventing.knative.dev/v1alpha1
    kind: Channel
    name: stock-filtered
    namespace: demo
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1alpha1
      kind: Service
      name: stock-pricer
      namespace: demo
  sink:
    apiVersion: serving.knative.dev/v1alpha1
    kind: Channel
    name: stock-priced
    namespace: demo
---
# Save priced stocks to Firestore
apiVersion: eventing.knative.dev/v1alpha1
kind: Subscription
metadata:
  name: stock-saver
spec:
  channel:
    apiVersion: eventing.knative.dev/v1alpha1
    kind: Channel
    name: stock-priced
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1alpha1
      kind: Service
      name: stock-saver
      namespace: demo